// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Members {
  id        Int      @id @default(autoincrement()) @map("id")
  email     String   @unique @map("email")
  password  String   @map("password")
  nickname  String   @map("nickname")
  money     Int      @default(0) @map("money")
  ownerYn   Role     @default(USER) @map("ownerYn")
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  restaurant Restaurants?
  reviews    Reviews[]
}

model Restaurants {
  id          Int      @id @default(autoincrement()) @map("id")
  memberId    Int      @unique @map("memberId")
  member      Members  @relation(fields: [memberId], references: [id])
  name        String   @map("name")
  description String   @map("description")
  image       String   @map("image")
  cate Cate @map("cate")
  createdAt   DateTime @default(now()) @map("createdAt")
  updatedAt   DateTime @updatedAt @map("updatedAt")

  menus   Menus[]
  reviews Reviews[]
}

model Reviews {
  id           Int      @id @default(autoincrement()) @map("id")
  memberId     Int      @map("memberId")
  restaurantId Int      @map("restaurantId")
  review       String   @map("review")
  score        Int      @map("score")
  createdAt    DateTime @default(now()) @map("createdAt")
  updatedAt    DateTime @updatedAt @map("updatedAt")

  member     Members     @relation(fields: [memberId], references: [id])
  restaurant Restaurants @relation(fields: [restaurantId], references: [id])
}

model Menus {
  id           Int      @id @default(autoincrement()) @map("id")
  restaurantId Int      @map("restaurantId")
  name         String   @map("name")
  description  String   @map("description")
  image        String   @map("image")
  price        Int      @map("price")
  createdAt    DateTime @default(now()) @map("createdAt")
  updatedAt    DateTime @updatedAt @map("updatedAt")

  restaurant Restaurants @relation(fields: [restaurantId], references: [id])
}

model Orders {
  id       Int   @id @default(autoincrement()) @map("id")
  memberId Int   @map("memberId")
  menuId   Int   @map("menuId")
  state    State @default(IN_PROGRESS) @map("state")
}

enum Role {
  USER
  OWNER
}

enum State {
  IN_PROGRESS
  COMPLETED
}

enum Cate {
  Pizza
  FastFood
  SnackBar
  Salad
  KoreanCuisine
  Meat
  Fried
  Midnight
  Dessert
  Noodles
}